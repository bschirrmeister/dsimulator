There are different scenarios where you can use. 

NOTE : If you want to use TFTP server, please modify tftp.py setting up the variable tftpMACserver, which 
by the momment is hardcoded

You will need:
	1. DHCP server ( I'm using ISC dhcp server and you can download at www.isc.org )
	2. DHCP server should have an scope for the CMTS network. So,if your virtualCMTS is configured
	   with IP 31.0.0.1, then your DHCP server should have an scope for this LAN 
           Here is my DHCP Server configuration

		# avoid ping before allocate		
		ping-check false; 
	  	# add a scope for CMTS subnet 
		subnet 31.0.0.0 netmask 255.0.0.0 {
			range 31.0.0.2 31.0.254.254;
			default-lease-time 6000;
		}
    3. TFTP Server: If you dont want to use tftp server, by the momment should need to comment the tftp_readrequest 
       signal on dhcp.py

Description of different scenarios where you will be able to use it.

1. Everything in one machine.
	1. DHCP server should be running
	2. The DHCP server must know how to route packets from CMTS to the simulator
		sudo route add -net CMTS_NETWORK netmask MASK dev eth0 
	3. Need to avoid arp request, so... ( no arp proxy, by the momment )
		sudo arp -s IPCMTS CMTS_MACADDRESS
	4. start simulator 
		sudo python2.5 simulator.py
	5. run 1cm.py from the sample files
		python 1cm.py	
		# have in mind you shoud edit sample files to run in your network
		# with the ipaddress where the simulator is running and the CMTS 
	    You should see on server side and client side, 1 device had just acquire IP.

    6. ICMP Verification : You should be able to ping any virtual device. 


2. Two machines on the same lan
	1. Server A : DHCP server up and running
	2. Server A : TFTP server up and running (optional)
	3. Server A : DHCP server must know how to route packets from CMTS network to the simulator 
		sudo route add -net CMTS_NETWORK netmask MASK dev eth0
	4. Note : Because we are running on different hosts on the same LAN, no need to fix arp entry table.
	5. Server B : simulator up and running
	6. Verify the sample to execute ( 1cm.py ), verify where the SimulatorBridge is instanciated, it should point to the simulator ip address. 
		simulator = SimulatorBridge('IP WHERE SIMULATOR RUNS',10003)
		# should also verified where the CMTS is created (setupCMTS)
	7. run a sample file and verify logs
		i.e: python 1cm.py
    8. ICMP Verification : You should be able to ping any virtual device. 

	You should see on server side and client side, 1 device had just acquire IP and , if tftp request, should see 
    how the virtual device is requesting and retriving the file ( is need, set tftpLogger on DEBUG level ).

** Important ** : By the momment it is not possible to ping any virtual device nor request for files from tftp 
    while running on the same server, but you can ping any virtual device and use any tftp server from any other 
    machine ( have in mind, that machine should know how to route the virtual network your devices are using )


Note : This scenarios had been implemented in VirtualMachines with success.


[ Samples ] 
1cm.py     		: Boot 1 Cable Modem
1cm_renew.py    : Boot 1 Cable Modem and show how to force a renew 
bootmeassures   : Boot some virtual devices and meassures how much time takes per device to acquire IP
manyCMs.py 		: Boot as many Cable Modems as you want. In this sample, you will see power_on and dhcp_discover messages splitted. This is becouse, if you are trying to simulate thousands of devices, it will take a while. 
1cm_1cpe.py     : Boot 1 Cable Modem and then 1 PC behind the Cable modem recentyly booted.
manyCMs_manyCPEs: Boot some CMs. Behing every CM is a PC. So , after a CM is booted a CPE behing that CM is booted also

[ config ] 
dhcpd.conf      : the dhcpd.conf file i had been using while developing and testing.

Assume you want to test a buggy dhcp implementation. Well, you already have one. There are 3 code samples
cpe_buggy.py : Implementes dhcp_buggy.py , which, basically get's looping for ever while trying to acquire an IP. If you want to try this, should 
edit cmdslistener.py and, when creating a CPE, allow it to create a buggy_cpe (importing buggy_cpe.py instead of cpe.py )
